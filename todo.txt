Norme:
	snake_case for functions, variables, structs.
	PascalCase for classes names;

• Request: Start line, header, body
	First line: 
		- Method. (The method is a one-word command that tells the server
			what it should do with the resource. For example, the server could
			be asked to send the resource to the client.)
		- Path. (The path component of the URL for the request.
			The path identifies the resource on the server.)
		- HTTP version. (The HTTP version number, showing the HTTP specification to
			which the client has tried to make the message comply.)
		
		EXAMPLE:
			GET / HTTP/1.1
			Host: 

	Request might contain additional items:
		- Query string. (This provides a string of information that the resource
			can use for some purpose. It follows the path, and is preceded by a question mark.)
		- scheme (e.g. http), host (e.g. www.example.com)

• Methods:
	Methods are case-sensitive.
	- GET (The GET method requests a representation of the specified resource.
		Requests using GET should only retrieve data.)
		Body is empty.

	- POST (The POST method submits an entity to the specified resource,
		often causing a change in state or side effects on the server.)

		If one or more resources has been created on the origin server
		as a result of successfully processing a POST request, the origin
		server SHOULD send a 201 (Created) response containing a Location header field that provides an identifier for the primary resource created (Section 10.2.2) and a representation that describes the status of the request while referring to the new resource(s).

	- DELETE (The DELETE method deletes the specified resource.)
	
	More info on methods: https://httpwg.org/specs/rfc9110.html#methods

	Processing:
		https://nginx.org/en/docs/http/request_processing.html
		Make sure method is allowed in route.

• Response
	- HTTP version.
	- Status code (e.g. '200 OK')
	
	More info on status codes: https://httpwg.org/specs/rfc9110.html#status.codes

• Headers fields (headers)
	Headers fields sare case-insensitive.
	MIME types:
		type/subtype, example text/html

• CGI
	CGI uses environment variables, passed with execve.
	- Create an array of strings with env variables
	- use full path (pwd + path) as PATH_INFO
	https://www6.uniovi.es/~antonio/ncsa_httpd/cgi/env.html
	https://en.wikipedia.org/wiki/Common_Gateway_Interface

[Config]

Parser:
	1. Config file
		For each 'server' block:
			• Directives
				- listen (host:port, bind 0.0.0.0 and port 8080 by default, if not provided) √
				- server_name (used when processing request, see Request:Processing) √
				- error_pages √
				- client_body_buffer_size √
				- location √

			• Routes (location)
				- limit_except (list of accepted methods for the route) √
				- rewrite (http redirection, 301/302) √
				- root (a directory or a file from where the file should be searched) √
				- autoindex (turn directory listing on or off) √
				- default_file (default file if request is a directory) √
				- CGI file extension ('cgi_extension' probably) √
				- upload_path (accept uploaded files and configure where they should be saved) √
	
	2. Request Headers
		• First line should be 'METHOD PATH HTTP/X.X'
		• next lines are header options, do not reject unknown values, just ignore (we cant do all of them)
		• such lines are of type 'Header: option', e.g. 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'
			(make sure to use lowercase strings when parsing header: e.g. 'content-type' should work)

Files
	- core: le cerveau, il appelle les autres
	- parser: le parser en gros
	- http: requests, responses, virtual servers, cgi

Classes
	• core
		- Webserv (main class)
			
	• http
		- Request
			unsigned int				_method;
			std::string					_uri;
			std::string					_http_protocol;
			std::string					_query_string;
			std::vector<std::string>	_header_fields;
			std::string					_body;
		- Response
			size_t						_status;
			std::vector<std::string>	_header_fields;
			std::string					_body;
		- Server
			Listen

	• Parser
		- ConfigParser
		- RequestParser

autoindex strategy:
	generate a html page with strings. add href links to all files in directory (see readdir(3))

set the first server for specific host:port as the default one (that will answer requests)

parse query string:
	query string starts from '?' character
	format is <arg>=<value>
	args are separated with &

	example ?arg1=value1&arg2=value2
	arg1 = value1;
	arg2 = value2